{"version":3,"sources":["components/input-text/input-text.jsx","constants/vcard-fields.js","redux/user/user.types.js","pages/create-profile/create-profile.jsx","redux/user/user.actions.js","assets/blank-avatar.jpg","pages/display-profile/display-profile.jsx","App.js","serviceWorkerRegistration.js","vcard.js","redux/user/user.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["InputText","label","otherProps","className","type","spellCheck","vCardFields","name","userTypes","connect","state","userProfile","user","dispatch","setUserPhoto","userPhoto","payload","setUserProfile","useState","setState","navigate","useNavigate","handleChange","e","target","value","prevState","onSubmit","preventDefault","map","field","idx","onChange","file","files","blob","Blob","url","URL","createObjectURL","userProfileQRData","qrRef","useRef","useEffect","QrCode","toCanvas","current","color","dark","err","console","log","src","BlankAvatar","alt","ref","App","path","element","Boolean","window","location","hostname","match","mappings","Email","Title","Homepage","makeVCard","details","card","key","INITIAL_STATE","userReducer","action","rootReducer","combineReducers","middlewares","logger","persistConfig","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60f7d823.chunk.js","sourcesContent":["import \"./input-text.css\";\n\nconst InputText = ({ label, ...otherProps }) => {\n  return (\n    <div className=\"input-container\">\n      <label className=\"input-label\">\n        <span>{label}</span>\n        <input\n          className=\"input-text\"\n          type=\"text\"\n          spellCheck=\"false\"\n          {...otherProps}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default InputText;\n","export const vCardFields = [\n  {\n    name: \"Display Name\",\n  },\n  {\n    name: \"Title\",\n  },\n  {\n    name: \"Phone Number\",\n  },\n  {\n    name: \"Email\",\n  },\n  {\n    name: \"Homepage\",\n  },\n];\n","export const userTypes = {\n  SET_USER_PROFILE: \"SET_USER_PROFILE\",\n  SET_USER_PHOTO: \"SET_USER_PHOTO\",\n};\n","import InputText from \"../../components/input-text/input-text\";\n\nimport \"./create-profile.css\";\nimport { vCardFields } from \"../../constants/vcard-fields\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setUserProfile, setUserPhoto } from \"../../redux/user/user.actions\";\nimport { connect } from \"react-redux\";\n\nconst CreateProfile = ({ userProfile, setUserProfile, setUserPhoto }) => {\n  const [state, setState] = useState(userProfile || {});\n\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setState((prevState) => ({ ...prevState, [name]: value }));\n  };\n\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n\n    const blob = new Blob([file]);\n\n    const url = URL.createObjectURL(blob, { type: blob.type });\n\n    setUserPhoto(url);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setUserProfile(state);\n    navigate(\"/\");\n  };\n\n  return (\n    <section className=\"create-profile\">\n      <h1>Create a profile</h1>\n      <form className=\"create-profile__form\" onSubmit={handleSubmit}>\n        {vCardFields.map((field, idx) => (\n          <InputText\n            label={field.name}\n            key={idx}\n            name={field.name}\n            onChange={handleChange}\n            value={state[field.name] || \"\"}\n          />\n        ))}\n\n        <input type=\"file\" onChange={handleFileUpload} />\n\n        <div>\n          <button className=\"btn\">Save</button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userProfile: state.user.userProfile,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setUserPhoto: (userPhoto) => dispatch(setUserPhoto(userPhoto)),\n  setUserProfile: (userProfile) => dispatch(setUserProfile(userProfile)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateProfile);\n","import { userTypes } from \"./user.types\";\n\nexport const setUserProfile = (userProfile) => ({\n  type: userTypes.SET_USER_PROFILE,\n  payload: userProfile,\n});\n\nexport const setUserPhoto = (userPhotoUrl) => ({\n  type: userTypes.SET_USER_PHOTO,\n  payload: userPhotoUrl,\n});\n","export default __webpack_public_path__ + \"static/media/blank-avatar.f463a804.jpg\";","import { useEffect, useRef } from \"react\";\nimport QrCode from \"qrcode\";\nimport { connect } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport BlankAvatar from \"../../assets/blank-avatar.jpg\";\nimport \"./display-profile.css\";\n\nconst DisplayProfile = ({ userPhoto, userProfile, userProfileQRData }) => {\n  const qrRef = useRef();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!userProfile) {\n      navigate(\"/create\");\n      return;\n    }\n\n    const qrOpts = {\n      color: {\n        dark: \"#333333\",\n      },\n    };\n\n    QrCode.toCanvas(qrRef.current, userProfileQRData, qrOpts, (err) => {\n      if (err) {\n        console.log(\"error:\", err);\n      }\n    });\n  }, []);\n\n  return userProfile ? (\n    <div className=\"user-profile-container\">\n      <div className=\"user-profile\">\n        <div className=\"user-profile__avatar\">\n          <img src={userPhoto || BlankAvatar} alt=\"\" />\n        </div>\n\n        <div className=\"user-profile__text\">\n          <h3 className=\"user-profile__text--name\">\n            {userProfile[\"Display Name\"]}\n          </h3>\n          <h3 className=\"user-profile__text--phone\">\n            {userProfile[\"Phone Number\"]}\n          </h3>\n          <h3 className=\"user-profile__text--email\">{userProfile[\"Email\"]}</h3>\n          <h3 className=\"user-profile__text--homepage\">\n            {userProfile[\"Homepage\"]}\n          </h3>\n        </div>\n      </div>\n      <div className=\"qr-canvas-container\">\n        <canvas className=\"qr-canvas\" ref={qrRef}></canvas>\n      </div>\n\n      <div className=\"qr-prompt\">\n        <h1>Scan to add</h1>\n      </div>\n    </div>\n  ) : (\n    <div></div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userPhoto: state.user.userPhoto,\n  userProfile: state.user.userProfile,\n  userProfileQRData: state.user.userProfileQRData,\n});\n\nexport default connect(mapStateToProps)(DisplayProfile);\n","import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nimport Homepage from \"./pages/homepage/homepage\";\nimport CreateProfile from \"./pages/create-profile/create-profile\";\nimport DisplayProfile from \"./pages/display-profile/display-profile\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Routes>\n        {/* <Route path=\"/\" element={<Homepage />} /> */}\n        <Route path=\"/\" element={<DisplayProfile />} />\n        <Route path=\"/create\" element={<CreateProfile />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const mappings = {\n  \"Display Name\": \"FN\",\n  Email: \"EMAIL\",\n  Title: \"TITLE\",\n  \"Phone Number\": \"TEL\",\n  Homepage: \"URL\",\n};\n\nexport const makeVCard = (details) => {\n  let card = `\nBEGIN:VCARD\nVERSION:3.0\n`;\n\n  for (const key in details) {\n    if (mappings[key]) {\n      card += `${mappings[key]}:${details[key]}\\n`;\n    }\n  }\n\n  card += `END:VCARD`;\n\n  return card;\n};\n","import { makeVCard } from \"../../vcard\";\nimport { userTypes } from \"./user.types\";\n\nconst INITIAL_STATE = {\n  userProfile: null,\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case userTypes.SET_USER_PROFILE:\n      return {\n        ...state,\n        userProfile: action.payload,\n        userProfileQRData: makeVCard(action.payload),\n      };\n\n    case userTypes.SET_USER_PHOTO:\n      return {\n        ...state,\n        userPhoto: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import userReducer from \"./user/user.reducer\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n});\n\nexport default rootReducer;\n","import rootReducer from \"./rootReducer\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport logger from \"redux-logger\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst middlewares = [logger];\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(persistedReducer, applyMiddleware(...middlewares));\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nimport { store, persistor } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}